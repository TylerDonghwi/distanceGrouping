const maxWeight = 8;
const n = 8;
const numIterations = 1000;

const colors = [
  "",
  "lightgray",
  "black",
  "red",
  "orange",
  "yellow",
  "green",
  "blue",
  "purple",
  "pink",
  "cyan",
  "brown",
  "olive",
  "yellowGreen",
  "peachPuff",
  "salmon",
  "khaki",
  "thistle",
];
const tests = [
  [
    [21, 8, 3],
    [21, 4, 3],
    [39, 26, 1],
    [8, 35, 2],
    [34, 2, 1],
    [8, 12, 2],
    [31, 10, 3],
    [33, 38, 2],
    [25, 4, 1],
    [39, 19, 2],
    [14, 26, 1],
    [11, 1, 3],
    [25, 29, 2],
    [22, 14, 1],
    [23, 37, 3],
    [30, 32, 2],
    [37, 2, 2],
    [39, 36, 1],
    [36, 2, 1],
    [17, 17, 2],
    [15, 26, 1],
    [14, 3, 3],
    [7, 13, 1],
    [26, 32, 3],
    [14, 6, 1],
    [3, 12, 1],
    [7, 17, 3],
    [26, 28, 2],
    [23, 34, 3],
    [4, 0, 1],
    [13, 39, 2],
    [27, 25, 2],
    [25, 16, 3],
    [15, 10, 1],
    [1, 16, 2],
    [3, 37, 3],
    [32, 16, 3],
    [32, 36, 1],
    [23, 4, 3],
  ],
  [
    [34, 18, 3],
    [9, 24, 2],
    [32, 36, 3],
    [13, 34, 2],
    [0, 13, 3],
    [5, 31, 3],
    [3, 3, 1],
    [37, 34, 1],
    [10, 15, 2],
    [29, 24, 1],
    [7, 12, 3],
    [31, 6, 3],
    [37, 2, 1],
    [15, 19, 2],
    [34, 5, 1],
    [27, 33, 1],
    [18, 23, 2],
    [9, 11, 2],
    [0, 10, 2],
    [20, 17, 2],
    [31, 18, 2],
    [22, 21, 3],
    [14, 34, 1],
    [27, 21, 1],
    [28, 39, 1],
    [26, 18, 3],
    [28, 26, 1],
    [35, 39, 1],
    [19, 23, 1],
    [18, 23, 1],
    [18, 17, 2],
    [17, 9, 1],
    [32, 8, 2],
    [38, 8, 2],
    [6, 29, 3],
    [6, 19, 1],
    [25, 8, 1],
    [39, 7, 2],
    [31, 24, 2],
    [9, 5, 1],
    [1, 34, 3],
    [13, 11, 1],
    [3, 31, 2],
    [29, 8, 1],
    [36, 30, 1],
    [35, 29, 3],
    [6, 0, 2],
    [9, 14, 2],
    [0, 3, 2],
  ],
  [
    [30, 1, 2],
    [0, 31, 3],
    [17, 13, 2],
    [5, 30, 1],
    [5, 21, 2],
    [17, 17, 1],
    [14, 24, 1],
    [20, 21, 1],
    [37, 0, 3],
    [24, 0, 2],
    [25, 37, 1],
    [24, 7, 2],
    [15, 26, 3],
    [16, 35, 2],
    [23, 36, 1],
    [22, 22, 2],
    [39, 5, 2],
    [26, 21, 3],
    [13, 8, 3],
    [14, 26, 1],
    [0, 31, 1],
    [21, 14, 1],
    [1, 7, 3],
    [16, 19, 1],
    [21, 6, 2],
    [8, 22, 3],
    [12, 18, 1],
    [21, 24, 3],
    [10, 3, 3],
    [23, 38, 2],
    [32, 26, 2],
    [12, 27, 3],
    [39, 7, 3],
    [25, 14, 1],
    [14, 4, 3],
    [8, 32, 3],
    [29, 20, 1],
    [0, 14, 3],
    [36, 27, 1],
    [4, 18, 1],
    [37, 7, 3],
    [11, 22, 2],
    [30, 15, 1],
    [25, 0, 2],
    [18, 3, 2],
    [32, 2, 3],
    [16, 19, 3],
    [0, 10, 2],
  ],
  [
    [25, 24, 2],
    [36, 22, 1],
    [4, 11, 3],
    [1, 19, 3],
    [30, 38, 2],
    [11, 32, 1],
    [29, 5, 3],
    [30, 38, 3],
    [4, 6, 3],
    [14, 28, 2],
    [20, 18, 1],
    [35, 11, 2],
    [13, 34, 3],
    [25, 5, 2],
    [10, 32, 2],
    [1, 35, 1],
    [12, 30, 2],
    [2, 13, 3],
    [37, 17, 2],
    [20, 7, 1],
    [35, 6, 2],
    [20, 9, 3],
    [21, 29, 1],
    [14, 32, 2],
    [5, 24, 1],
    [34, 3, 3],
    [35, 22, 1],
    [23, 39, 2],
    [4, 0, 1],
    [18, 27, 2],
    [9, 2, 1],
    [24, 22, 3],
    [17, 38, 1],
    [1, 36, 1],
    [18, 33, 1],
    [14, 12, 2],
    [18, 5, 3],
    [19, 18, 1],
    [38, 5, 2],
    [0, 19, 1],
    [14, 28, 1],
    [37, 12, 1],
    [18, 21, 2],
    [3, 6, 3],
    [31, 0, 2],
    [37, 18, 1],
  ],
  [
    [37, 23, 3],
    [38, 13, 2],
    [32, 4, 1],
    [33, 23, 2],
    [12, 6, 1],
    [9, 37, 3],
    [9, 28, 1],
    [10, 12, 2],
    [36, 30, 1],
    [1, 30, 3],
    [11, 36, 3],
    [16, 12, 1],
    [1, 35, 3],
    [8, 17, 3],
    [0, 9, 3],
    [11, 0, 3],
    [17, 0, 3],
    [30, 35, 3],
    [19, 39, 2],
    [35, 3, 1],
    [11, 18, 2],
    [8, 26, 1],
    [20, 29, 2],
    [15, 17, 3],
    [17, 26, 2],
    [13, 11, 1],
    [4, 5, 2],
    [18, 34, 3],
    [2, 1, 1],
    [8, 33, 2],
    [22, 32, 1],
    [31, 38, 3],
    [11, 23, 2],
    [27, 5, 2],
    [19, 31, 2],
    [18, 7, 2],
    [27, 11, 1],
    [8, 17, 3],
    [0, 35, 2],
    [15, 33, 3],
    [1, 16, 2],
    [16, 5, 2],
    [14, 27, 2],
    [24, 4, 2],
    [23, 12, 2],
    [27, 1, 2],
    [30, 21, 3],
    [1, 26, 1],
    [15, 17, 2],
    [27, 36, 3],
    [11, 28, 2],
    [21, 27, 3],
    [2, 39, 2],
    [35, 6, 1],
    [36, 27, 3],
    [7, 39, 2],
    [18, 16, 3],
  ],
  [
    [28, 36, 3],
    [23, 20, 3],
    [19, 13, 1],
    [32, 25, 1],
    [11, 0, 2],
    [21, 14, 1],
    [17, 25, 3],
    [39, 18, 2],
    [5, 17, 3],
    [21, 13, 1],
    [18, 10, 1],
    [7, 2, 2],
    [35, 16, 3],
    [24, 19, 1],
    [19, 22, 3],
    [24, 12, 1],
    [16, 36, 1],
    [20, 36, 1],
    [36, 19, 3],
    [28, 30, 1],
    [2, 19, 1],
    [16, 30, 3],
    [9, 13, 3],
    [35, 4, 1],
    [9, 28, 2],
    [23, 21, 1],
    [13, 20, 3],
    [22, 39, 2],
    [2, 16, 2],
    [19, 2, 2],
    [38, 31, 2],
    [35, 33, 2],
    [13, 35, 1],
    [14, 27, 2],
    [11, 17, 3],
    [1, 34, 2],
    [24, 35, 2],
    [13, 18, 1],
    [31, 20, 2],
    [15, 1, 1],
    [14, 22, 3],
    [3, 16, 2],
    [29, 5, 2],
    [2, 5, 2],
    [22, 37, 1],
    [1, 34, 3],
    [27, 0, 1],
    [9, 11, 2],
    [22, 10, 2],
    [12, 26, 3],
    [32, 31, 2],
    [19, 13, 2],
    [8, 19, 3],
    [15, 25, 2],
    [12, 12, 3],
    [14, 32, 1],
    [27, 39, 1],
    [7, 39, 2],
    [10, 23, 1],
    [30, 7, 2],
  ],
  [
    [24, 11, 2],
    [5, 31, 2],
    [31, 36, 2],
    [28, 3, 1],
    [21, 34, 3],
    [30, 29, 1],
    [39, 34, 3],
    [3, 6, 1],
    [26, 36, 1],
    [25, 21, 2],
    [12, 23, 3],
    [8, 21, 2],
    [24, 15, 3],
    [29, 17, 3],
    [28, 27, 3],
    [16, 13, 3],
    [12, 24, 3],
    [27, 5, 2],
    [2, 37, 3],
    [20, 31, 2],
    [26, 39, 1],
    [13, 18, 1],
    [5, 23, 2],
    [34, 27, 1],
    [8, 37, 3],
    [17, 6, 1],
    [35, 18, 2],
    [39, 12, 2],
    [22, 16, 1],
    [25, 11, 3],
    [4, 30, 3],
    [32, 22, 3],
    [4, 34, 1],
    [32, 34, 1],
    [0, 28, 3],
    [3, 9, 1],
  ],
  [
    [13, 32, 1],
    [7, 13, 3],
    [28, 4, 1],
    [39, 23, 2],
    [11, 10, 1],
    [22, 6, 3],
    [7, 11, 1],
    [22, 33, 1],
    [9, 13, 2],
    [10, 23, 2],
    [32, 20, 1],
    [11, 1, 3],
    [15, 2, 1],
    [31, 23, 1],
    [18, 5, 3],
    [22, 3, 2],
    [2, 14, 3],
    [13, 13, 1],
    [1, 26, 1],
    [4, 38, 1],
    [13, 14, 3],
    [32, 28, 2],
    [29, 27, 1],
    [22, 15, 1],
    [34, 19, 3],
    [8, 28, 2],
    [9, 37, 2],
    [34, 3, 2],
    [26, 28, 2],
    [13, 31, 3],
    [2, 18, 1],
    [28, 28, 3],
    [25, 29, 3],
    [16, 14, 1],
    [30, 27, 2],
    [38, 24, 2],
    [6, 37, 3],
    [25, 39, 2],
    [12, 36, 3],
    [34, 15, 2],
    [20, 35, 2],
    [30, 38, 2],
    [5, 37, 3],
    [10, 33, 3],
    [30, 34, 2],
    [10, 7, 3],
    [15, 35, 2],
  ],
  [
    [3, 3, 2],
    [7, 9, 2],
    [23, 7, 3],
    [2, 27, 1],
    [29, 39, 1],
    [33, 32, 2],
    [24, 11, 2],
    [26, 23, 2],
    [12, 39, 1],
    [9, 35, 3],
    [2, 4, 3],
    [25, 20, 3],
    [9, 39, 1],
    [7, 34, 3],
    [5, 38, 2],
    [19, 30, 1],
    [36, 30, 3],
    [12, 11, 2],
    [31, 15, 2],
    [8, 20, 3],
    [38, 39, 1],
    [23, 13, 3],
    [33, 38, 2],
    [30, 8, 3],
    [36, 14, 2],
    [30, 39, 3],
    [26, 39, 3],
    [6, 37, 3],
    [4, 37, 1],
    [35, 4, 3],
    [31, 2, 2],
    [37, 15, 2],
    [25, 6, 3],
    [9, 21, 2],
    [12, 11, 2],
    [14, 11, 3],
    [20, 17, 3],
    [10, 20, 3],
    [38, 18, 1],
    [1, 9, 3],
    [15, 26, 1],
    [34, 0, 3],
    [29, 22, 2],
    [39, 14, 1],
    [39, 33, 1],
    [30, 11, 1],
    [1, 8, 1],
    [13, 3, 2],
    [16, 23, 2],
    [4, 16, 2],
    [37, 35, 1],
    [21, 38, 1],
    [2, 16, 3],
  ],
  [
    [26, 9, 1],
    [22, 20, 3],
    [29, 37, 3],
    [11, 22, 3],
    [2, 27, 3],
    [22, 6, 1],
    [6, 6, 3],
    [8, 34, 1],
    [36, 19, 1],
    [5, 14, 1],
    [19, 18, 3],
    [21, 36, 3],
    [20, 28, 1],
    [21, 20, 2],
    [37, 18, 2],
    [33, 17, 3],
    [6, 6, 1],
    [36, 8, 1],
    [39, 20, 1],
    [12, 10, 3],
    [25, 26, 2],
    [21, 7, 2],
    [3, 2, 1],
    [18, 36, 1],
    [14, 35, 3],
    [19, 36, 2],
    [33, 29, 2],
    [30, 38, 1],
    [11, 14, 1],
    [20, 1, 2],
    [9, 12, 3],
  ],
  [
    [29, 27, 2],
    [11, 31, 1],
    [10, 37, 1],
    [12, 32, 2],
    [26, 17, 1],
    [21, 20, 2],
    [8, 37, 2],
    [22, 37, 3],
    [27, 38, 2],
    [17, 0, 2],
    [18, 18, 3],
    [39, 11, 1],
    [22, 16, 1],
    [11, 18, 1],
    [30, 7, 3],
    [12, 7, 3],
    [36, 11, 1],
    [24, 21, 2],
    [33, 6, 3],
    [25, 15, 1],
    [19, 27, 2],
    [1, 31, 2],
    [4, 14, 1],
    [5, 36, 1],
    [9, 37, 1],
    [7, 16, 2],
    [36, 18, 3],
    [0, 1, 3],
    [30, 1, 3],
    [16, 25, 2],
    [9, 22, 3],
    [32, 8, 2],
    [26, 5, 1],
    [29, 7, 1],
    [6, 17, 2],
    [0, 8, 1],
    [27, 16, 2],
    [39, 32, 1],
  ],
  [
    [3, 18, 3],
    [23, 28, 1],
    [12, 22, 3],
    [12, 19, 3],
    [9, 25, 1],
    [9, 16, 1],
    [11, 37, 2],
    [28, 13, 1],
    [34, 18, 3],
    [33, 31, 2],
    [14, 24, 3],
    [1, 33, 1],
    [32, 33, 1],
    [38, 0, 2],
    [26, 15, 1],
    [16, 39, 3],
    [23, 2, 2],
    [22, 38, 1],
    [10, 30, 1],
    [32, 36, 1],
    [30, 0, 2],
    [3, 1, 2],
    [5, 7, 1],
    [31, 12, 2],
    [14, 36, 2],
    [25, 27, 2],
    [4, 17, 1],
    [26, 7, 2],
    [5, 7, 2],
    [38, 30, 3],
    [10, 6, 2],
  ],
  [
    [22, 32, 3],
    [19, 21, 2],
    [9, 7, 2],
    [27, 10, 2],
    [8, 21, 2],
    [2, 11, 2],
    [29, 22, 1],
    [8, 9, 1],
    [37, 4, 2],
    [10, 38, 1],
    [33, 2, 2],
    [5, 8, 1],
    [10, 34, 2],
    [31, 34, 1],
    [6, 10, 3],
    [6, 8, 1],
    [37, 6, 2],
    [30, 20, 1],
    [15, 25, 2],
    [28, 0, 3],
    [32, 4, 1],
    [19, 19, 1],
    [3, 30, 1],
    [4, 27, 2],
    [25, 2, 1],
    [26, 16, 2],
    [13, 28, 3],
    [1, 36, 2],
    [16, 32, 3],
    [11, 35, 1],
    [24, 18, 3],
    [22, 28, 2],
    [39, 1, 3],
    [1, 28, 2],
    [5, 0, 3],
    [12, 21, 1],
    [16, 27, 1],
    [14, 4, 3],
    [7, 0, 1],
    [21, 9, 1],
    [9, 27, 2],
    [2, 36, 2],
    [2, 15, 1],
    [27, 34, 2],
    [24, 3, 2],
    [9, 32, 2],
    [22, 27, 3],
    [37, 19, 2],
  ],
  [
    [28, 18, 2],
    [27, 36, 2],
    [33, 39, 2],
    [15, 36, 2],
    [22, 35, 1],
    [27, 29, 1],
    [6, 12, 2],
    [7, 31, 1],
    [32, 22, 3],
    [0, 23, 3],
    [13, 34, 1],
    [38, 13, 2],
    [28, 27, 3],
    [13, 37, 2],
    [18, 8, 1],
    [10, 29, 1],
    [18, 4, 1],
    [1, 10, 3],
    [5, 20, 1],
    [25, 20, 1],
    [31, 35, 1],
    [35, 14, 2],
    [16, 20, 1],
    [20, 14, 3],
    [3, 29, 2],
    [18, 18, 1],
    [16, 17, 3],
    [14, 14, 2],
    [23, 4, 1],
    [34, 10, 1],
    [3, 12, 2],
    [38, 15, 2],
    [27, 20, 3],
    [7, 34, 1],
    [5, 8, 2],
  ],
  [
    [1, 13, 3],
    [28, 31, 1],
    [30, 3, 2],
    [27, 9, 2],
    [11, 3, 1],
    [29, 12, 1],
    [8, 2, 2],
    [26, 17, 2],
    [17, 22, 1],
    [5, 11, 1],
    [18, 28, 1],
    [13, 10, 3],
    [21, 20, 3],
    [7, 33, 1],
    [22, 4, 1],
    [38, 18, 2],
    [17, 3, 3],
    [22, 9, 1],
    [0, 17, 3],
    [33, 15, 2],
    [15, 31, 2],
    [2, 38, 2],
    [18, 32, 2],
    [0, 5, 1],
    [27, 2, 1],
    [32, 34, 3],
    [27, 11, 1],
    [33, 23, 1],
    [23, 3, 3],
    [27, 28, 1],
    [38, 18, 3],
    [13, 7, 2],
    [30, 39, 2],
    [20, 30, 3],
    [28, 25, 2],
    [9, 18, 1],
    [11, 12, 1],
    [1, 14, 3],
    [31, 1, 3],
    [24, 12, 1],
    [13, 25, 1],
    [19, 7, 3],
  ],
  [
    [39, 13, 3],
    [34, 18, 1],
    [2, 34, 2],
    [31, 22, 3],
    [25, 36, 3],
    [19, 13, 3],
    [14, 21, 1],
    [29, 34, 2],
    [27, 17, 1],
    [7, 25, 1],
    [23, 13, 3],
    [30, 3, 2],
    [4, 8, 1],
    [31, 37, 3],
    [23, 38, 3],
    [19, 2, 3],
    [33, 31, 2],
    [9, 38, 1],
    [1, 9, 1],
    [20, 35, 2],
    [0, 27, 1],
    [21, 21, 3],
    [24, 35, 3],
    [9, 38, 1],
    [21, 5, 3],
    [34, 28, 3],
    [8, 28, 2],
    [16, 39, 3],
    [8, 12, 1],
    [9, 33, 1],
    [30, 0, 1],
    [31, 19, 2],
    [6, 22, 1],
    [8, 18, 2],
    [28, 27, 3],
  ],
  [
    [29, 12, 2],
    [24, 34, 1],
    [1, 20, 2],
    [3, 4, 2],
    [38, 6, 2],
    [21, 22, 2],
    [18, 0, 1],
    [22, 13, 2],
    [9, 1, 3],
    [37, 27, 2],
    [39, 6, 3],
    [28, 8, 3],
    [18, 14, 2],
    [19, 1, 3],
    [16, 12, 3],
    [35, 25, 3],
    [37, 8, 1],
    [22, 24, 3],
    [28, 38, 2],
    [3, 0, 3],
    [24, 1, 1],
    [8, 3, 1],
    [1, 4, 3],
    [29, 19, 3],
    [37, 3, 1],
    [28, 13, 3],
    [3, 13, 1],
    [17, 9, 3],
    [9, 16, 3],
    [36, 29, 3],
    [34, 11, 2],
    [13, 39, 2],
    [39, 17, 2],
    [37, 27, 2],
    [22, 31, 1],
    [1, 21, 2],
    [11, 13, 3],
    [22, 30, 1],
    [15, 37, 1],
    [14, 18, 1],
    [19, 37, 3],
    [21, 30, 2],
    [39, 16, 1],
    [15, 12, 3],
    [22, 32, 2],
    [16, 9, 2],
    [0, 25, 3],
    [11, 12, 1],
    [35, 11, 2],
    [23, 5, 2],
    [23, 37, 2],
    [22, 18, 1],
    [11, 12, 3],
    [16, 4, 2],
    [39, 14, 3],
    [29, 17, 2],
    [38, 30, 2],
    [25, 20, 1],
    [3, 20, 2],
    [19, 4, 2],
  ],
  [
    [9, 14, 3],
    [10, 12, 1],
    [23, 20, 3],
    [2, 10, 2],
    [6, 29, 2],
    [5, 37, 1],
    [32, 2, 3],
    [11, 10, 1],
    [12, 19, 3],
    [12, 3, 1],
    [21, 27, 3],
    [28, 14, 1],
    [6, 3, 1],
    [27, 34, 2],
    [35, 35, 1],
    [27, 33, 2],
    [6, 20, 2],
    [10, 32, 1],
    [17, 37, 2],
    [17, 37, 1],
    [5, 23, 3],
    [33, 14, 2],
    [18, 29, 2],
    [10, 5, 1],
    [24, 38, 3],
    [35, 24, 3],
    [22, 16, 1],
    [11, 1, 1],
    [23, 20, 3],
    [35, 2, 1],
    [35, 30, 3],
    [24, 28, 2],
    [31, 36, 3],
    [26, 20, 2],
    [17, 5, 3],
    [27, 17, 3],
    [36, 3, 3],
    [36, 16, 2],
    [23, 24, 3],
    [19, 25, 3],
    [19, 26, 3],
    [19, 5, 2],
    [23, 8, 1],
    [20, 1, 1],
    [32, 3, 1],
    [24, 25, 2],
    [17, 2, 2],
    [8, 27, 2],
    [35, 25, 2],
    [30, 17, 3],
    [9, 2, 2],
    [26, 1, 3],
    [38, 12, 2],
    [2, 5, 2],
    [37, 22, 1],
    [33, 5, 1],
  ],
  [
    [1, 38, 2],
    [38, 8, 1],
    [35, 29, 3],
    [17, 28, 1],
    [38, 18, 1],
    [3, 34, 1],
    [19, 33, 1],
    [36, 2, 1],
    [29, 31, 1],
    [27, 18, 2],
    [8, 8, 2],
    [17, 25, 3],
    [35, 39, 2],
    [24, 6, 3],
    [13, 18, 3],
    [3, 23, 2],
    [2, 33, 2],
    [29, 11, 2],
    [26, 15, 3],
    [5, 3, 1],
    [1, 22, 1],
    [17, 8, 2],
    [12, 31, 3],
    [1, 29, 1],
    [1, 15, 3],
    [19, 39, 2],
    [16, 19, 1],
    [0, 30, 1],
    [4, 15, 2],
    [34, 29, 1],
    [5, 23, 2],
    [17, 28, 2],
    [29, 19, 3],
    [38, 17, 2],
    [16, 17, 1],
    [1, 39, 1],
    [2, 24, 1],
    [18, 29, 3],
    [35, 14, 3],
    [5, 14, 2],
    [35, 4, 3],
    [17, 10, 3],
    [18, 37, 3],
    [6, 37, 1],
    [37, 5, 2],
    [39, 16, 2],
    [33, 10, 1],
    [21, 12, 2],
    [2, 0, 1],
    [37, 26, 2],
    [28, 31, 2],
    [1, 26, 3],
    [34, 9, 3],
    [12, 0, 3],
    [8, 14, 3],
    [20, 33, 1],
    [37, 12, 3],
    [39, 29, 3],
    [1, 19, 1],
  ],
  [
    [3, 28, 1],
    [16, 9, 3],
    [33, 36, 1],
    [19, 28, 2],
    [10, 10, 1],
    [23, 29, 3],
    [11, 0, 2],
    [24, 37, 2],
    [1, 11, 1],
    [27, 6, 3],
    [39, 32, 3],
    [1, 12, 2],
    [9, 32, 3],
    [5, 32, 3],
    [35, 21, 2],
    [7, 27, 2],
    [32, 18, 1],
    [3, 22, 3],
    [38, 20, 3],
    [28, 11, 3],
    [35, 26, 3],
    [37, 36, 1],
    [17, 23, 3],
    [15, 17, 3],
    [14, 11, 3],
    [23, 7, 3],
    [37, 24, 3],
    [19, 4, 2],
    [19, 39, 3],
    [37, 13, 1],
    [33, 17, 3],
  ],
];

console.time("timer");
test(tests);
console.timeEnd("timer");

// Display Zone
function display(coor, i, max, n) {
  const parent = document.createElement("div");

  const { groups, travels } = kMeanCluster(coor, max, n);
  visualiseCoordinates(coor, groups, parent);

  const ul = document.createElement("ul");
  addLi(ul, `Index: ${i}, Num jobs: ${coor.length}`);
  addLi(ul, `MaxCap: ${max}, Num Technicians: ${n}`);
  addLi(
    ul,
    `Coordinates: ${coor
      .map((element) => `[${element[0]}, ${element[1]}]`)
      .join(", ")}`
  );
  addLi(ul, "");

  const weights = groups.map((group) =>
    group.reduce((sum, coor) => sum + coor[2], 0)
  );

  groups
    .map((group) =>
      group.map((element) => `[${element[0]}, ${element[1]}]`).join(", ")
    )
    .forEach((group, i) => {
      addLi(
        ul,
        i === groups.length - 1
          ? `overflow: 0, ${group ? group : "None Assigned"}`
          : `${colors[i + 3]}: t: ${Math.floor(travels[i])}, w: ${
              weights[i]
            }, ${group}`
      );
    });

  const totalTravel = Math.floor(
    travels.reduce((total, travel) => total + travel, 0)
  );
  addLi(ul, "");
  addLi(ul, `Total Travel: ${totalTravel}`);

  parent.appendChild(ul);
  document.body.appendChild(parent);
  return totalTravel;
}
function visualiseCoordinates(coordinates, groups, parent) {
  const [y, x] = getXY(coordinates);

  const groupArr = Array.from({ length: x + 1 }, () =>
    new Array(y + 1).fill(0)
  );
  const weightArr = Array.from({ length: x + 1 }, () =>
    new Array(y + 1).fill(0)
  );

  coordinates.forEach((coordinate) => {
    groupArr[coordinate[1]][coordinate[0]] = 1;
    weightArr[coordinate[1]][coordinate[0]] = coordinate[2];
  });

  groups.forEach((group, i) => {
    group.forEach((location) => {
      groupArr[location[1]][location[0]] = i === groups.length - 1 ? 1 : i + 3;
    });
  });

  const table = document.createElement("table");

  for (let i = 0; i <= x; i++) {
    const row = document.createElement("tr");

    for (let j = 0; j <= y; j++) {
      const cell = document.createElement("td");
      cell.textContent = `${j}, ${i}, ${weightArr[i][j]}`;
      cell.style.textAlign = "center";
      cell.style.backgroundColor = colors[groupArr[i][j]];
      cell.style.border = "solid 1px black";
      cell.style.fontSize = "10px";
      row.appendChild(cell);
    }
    table.appendChild(row);
  }
  parent.appendChild(table);
}
function addLi(parent, text) {
  const li = document.createElement("li");
  li.textContent = text;
  parent.appendChild(li);
}

//
// Testing Zone
//
function generateTests() {
  const tests = [];
  for (let i = 0; i < 20; i++) {
    const coordinates = [];

    let size = Math.random() * 30 + 30;
    for (let i = 0; i < size; i++) {
      let x = Math.floor(Math.random() * 40);
      let y = Math.floor(Math.random() * 40);
      let z = Math.floor(Math.random() * 3) + 1;
      coordinates.push([x, y, z]);
    }
    tests.push("[" + coordinates.join("], [") + "]");
  }
  console.log("[" + tests.join("], [") + "]");
}
function test(tests) {
  tests.forEach((test, i) => {
    display(test, i, maxWeight, n);
    document.body.appendChild(document.createElement("br"));
  });
}

// K means clustering with x iterations with randomly chosen coordinates
// RUNTIME: O(number of iterations * number of jobs * number of technicians)

// Iterating multiple times to find the best K-means cluster
function kMeanCluster(coordinates, max, n) {
  let res;
  let minTravel = Number.MAX_SAFE_INTEGER;

  for (let i = 0; i < numIterations; i++) {
    const cur = getRandomKMean(coordinates, max, n);
    let curTravel = cur.travels.reduce((sum, travel) => sum + travel, 0);
    if (curTravel < minTravel) {
      res = cur;
      minTravel = curTravel;
    }
  }
  return res;
}

// Finding a random K mean cluster
function getRandomKMean(coordinates, max, n) {
  const { groups, technicians, added } = initialSetUp(coordinates, n);

  const startPoints = [];

  for (let i = 0; i < n; i++) {
    const rand = getRandomJob(coordinates, added);
    if (rand === -1) break;
    groups[i].push(coordinates[rand]);
    startPoints.push(rand);
    technicians[i].weight += coordinates[rand][2];
  }

  coordinates.forEach((coor, i) => {
    if (added[i]) return;
    const index = closestTech(coordinates, i, startPoints, technicians, max);
    if (index === -1) return;
    groups[index].push(coor);
    technicians[index].weight += coor[2];
    added[i] = true;
  });

  added.forEach((el, i) => {
    if (!el) {
      groups[n].push(coordinates[i]);
    }
  });

  return {
    groups,
    travels: technicians.map((tech) => tech.travel),
  };
}

function closestTech(coordinates, x, startPoints, technicians, max) {
  const inits = startPoints.map((el) => coordinates[el]);
  let minDistance = Number.MAX_SAFE_INTEGER;

  const closest = inits.reduce((minIndex, init, i) => {
    if (technicians[i].weight + coordinates[x][2] > max) return minIndex;

    let curDistance = getDistance(init, coordinates[x]);
    if (curDistance < minDistance) {
      minDistance = curDistance;
      return i;
    }

    return minIndex;
  }, -1);

  if (closest !== -1) {
    technicians[closest].travel += minDistance;
  }

  return closest;
}

function initialSetUp(coordinates, n) {
  const [y, x] = getXY(coordinates);
  const m = coordinates.length;
  const groups = Array.from(Array(n + 1), () => []);
  const technicians = Array.from(Array(n), () => {
    return {
      curLocation: [Math.floor(y / 2), Math.floor(x / 2)],
      travel: 0,
      weight: 0,
    };
  });
  const added = [...Array(m)].map(() => false);
  return { m, groups, technicians, added };
}

// Returns the range of area that the coordinates are located
function getXY(coordinates) {
  return coordinates.reduce(
    (max, coordinate) => {
      return [Math.max(max[0], coordinate[0]), Math.max(max[1], coordinate[1])];
    },
    [0, 0]
  );
}

// Returns the distance
function getDistance(a, b) {
  return Math.sqrt((a[0] - b[0]) ** 2 + (a[1] - b[1]) ** 2);
}

// Returns a random job that is not already added to a group.
function getRandomJob(coordinates, added) {
  if (added.every((el) => el)) return -1;

  let rand = Math.floor(Math.random() * coordinates.length);
  while (added[rand]) {
    rand = Math.floor(Math.random() * coordinates.length);
  }
  added[rand] = true;
  return rand;
}
