const maxWeight = 8;
const n = 10;
const numIterations = 1000;

const colors = [
  "",
  "lightgray",
  "black",
  "orange",
  "yellow",
  "green",
  "pink",
  "cyan",
  "brown",
  "olive",
  "yellowGreen",
  "peachPuff",
  "salmon",
  "khaki",
  "thistle",
];
const tests = [
  [
    [4, 19, 4],
    [3, 29, 3],
    [13, 5, 1],
    [16, 18, 2],
    [9, 21, 4],
    [16, 38, 1],
    [12, 30, 2],
    [3, 32, 3],
    [8, 3, 1],
    [32, 20, 3],
    [16, 6, 3],
    [36, 1, 2],
    [17, 35, 1],
    [35, 4, 1],
    [33, 26, 3],
    [29, 8, 2],
    [19, 33, 3],
    [5, 22, 3],
    [33, 12, 4],
    [18, 3, 4],
    [8, 13, 4],
    [18, 32, 2],
    [27, 20, 1],
    [11, 20, 4],
    [18, 24, 2],
    [34, 12, 2],
    [9, 27, 3],
    [5, 11, 1],
    [3, 27, 2],
    [23, 11, 3],
    [9, 1, 1],
    [27, 22, 3],
    [16, 34, 1],
    [26, 10, 2],
    [18, 15, 4],
    [17, 24, 2],
    [13, 19, 1],
    [0, 37, 4],
    [8, 15, 2],
  ],
  [
    [26, 8, 3],
    [24, 8, 3],
    [36, 18, 2],
    [22, 17, 2],
    [7, 35, 4],
    [8, 16, 4],
    [34, 6, 4],
    [28, 4, 3],
    [34, 10, 1],
    [10, 35, 3],
    [2, 10, 2],
    [0, 35, 4],
    [34, 22, 2],
    [36, 12, 1],
    [4, 3, 1],
    [25, 31, 1],
    [21, 16, 4],
    [10, 10, 1],
    [12, 23, 1],
    [4, 14, 2],
    [9, 26, 1],
    [24, 30, 1],
    [35, 29, 2],
    [4, 39, 3],
    [7, 15, 2],
    [38, 32, 4],
    [27, 11, 3],
    [32, 17, 1],
    [15, 25, 2],
    [11, 16, 4],
    [39, 16, 3],
    [36, 3, 4],
    [16, 37, 3],
    [2, 27, 4],
  ],
  [
    [12, 15, 3],
    [0, 30, 3],
    [24, 20, 4],
    [35, 27, 3],
    [2, 34, 4],
    [32, 12, 3],
    [35, 0, 4],
    [4, 19, 1],
    [18, 0, 1],
    [21, 38, 1],
    [29, 19, 3],
    [11, 7, 1],
    [15, 8, 1],
    [13, 37, 1],
    [30, 38, 4],
    [22, 35, 2],
    [1, 8, 1],
    [35, 1, 1],
    [11, 22, 4],
    [15, 25, 1],
    [9, 17, 4],
    [21, 9, 2],
    [20, 25, 1],
    [8, 6, 4],
    [28, 14, 4],
    [35, 25, 1],
    [24, 4, 1],
    [8, 37, 2],
    [33, 22, 1],
    [3, 1, 1],
    [1, 28, 4],
    [37, 23, 2],
    [15, 19, 1],
    [35, 33, 1],
    [34, 4, 2],
    [34, 22, 1],
    [11, 20, 3],
    [18, 12, 2],
    [35, 20, 2],
    [16, 13, 3],
    [16, 11, 1],
  ],
  [
    [18, 16, 2],
    [10, 5, 1],
    [27, 11, 3],
    [37, 14, 3],
    [19, 4, 1],
    [6, 19, 1],
    [26, 9, 3],
    [17, 25, 1],
    [8, 39, 2],
    [34, 36, 3],
    [6, 32, 1],
    [36, 30, 4],
    [4, 18, 4],
    [39, 35, 2],
    [24, 23, 1],
    [20, 20, 2],
    [25, 25, 1],
    [31, 19, 4],
    [14, 11, 1],
    [29, 15, 3],
    [31, 0, 2],
    [3, 15, 4],
    [38, 7, 1],
    [33, 19, 4],
    [32, 31, 3],
    [10, 18, 1],
    [11, 11, 2],
    [33, 31, 1],
    [30, 13, 1],
    [31, 37, 1],
    [26, 4, 4],
    [34, 2, 4],
    [1, 20, 2],
    [2, 19, 1],
    [39, 29, 3],
    [37, 29, 1],
    [2, 15, 2],
    [37, 36, 4],
    [21, 18, 3],
    [38, 38, 2],
    [11, 21, 3],
    [32, 9, 3],
    [16, 12, 1],
    [22, 25, 2],
    [25, 33, 1],
    [35, 1, 2],
    [24, 31, 3],
    [28, 29, 4],
    [8, 0, 3],
    [8, 24, 4],
    [0, 33, 4],
    [24, 21, 3],
    [4, 33, 3],
    [33, 25, 3],
    [36, 4, 4],
  ],
  [
    [13, 38, 4],
    [39, 33, 1],
    [7, 6, 1],
    [17, 2, 3],
    [37, 31, 1],
    [39, 19, 2],
    [17, 4, 3],
    [24, 38, 3],
    [22, 1, 4],
    [28, 30, 3],
    [29, 24, 3],
    [21, 26, 4],
    [25, 23, 3],
    [22, 8, 2],
    [27, 25, 3],
    [38, 3, 4],
    [29, 39, 2],
    [14, 37, 1],
    [36, 17, 2],
    [26, 5, 2],
    [37, 17, 4],
    [3, 14, 2],
    [23, 38, 1],
    [38, 16, 4],
    [27, 35, 4],
    [4, 22, 1],
    [21, 25, 3],
    [6, 27, 1],
    [8, 23, 4],
    [17, 25, 3],
    [34, 21, 1],
  ],
  [
    [16, 13, 3],
    [2, 24, 3],
    [0, 23, 2],
    [15, 8, 2],
    [1, 37, 2],
    [21, 7, 1],
    [11, 21, 1],
    [34, 16, 1],
    [17, 34, 1],
    [6, 26, 4],
    [11, 37, 4],
    [31, 4, 4],
    [18, 29, 2],
    [27, 30, 1],
    [30, 39, 1],
    [39, 32, 2],
    [25, 3, 4],
    [9, 37, 1],
    [3, 21, 1],
    [16, 24, 1],
    [9, 13, 3],
    [11, 26, 1],
    [22, 1, 3],
    [6, 15, 3],
    [29, 39, 1],
    [39, 36, 3],
    [34, 33, 2],
    [24, 8, 4],
    [20, 7, 2],
    [13, 9, 4],
    [22, 34, 4],
    [13, 8, 3],
    [9, 20, 4],
    [3, 3, 1],
    [4, 38, 4],
    [28, 39, 1],
    [0, 23, 2],
    [0, 29, 1],
    [14, 35, 3],
    [19, 27, 2],
    [14, 36, 4],
    [1, 21, 2],
    [24, 25, 4],
    [5, 32, 3],
    [8, 33, 3],
    [7, 7, 1],
    [34, 2, 1],
    [20, 5, 1],
    [15, 6, 2],
    [31, 11, 3],
    [21, 17, 2],
    [20, 30, 1],
    [19, 14, 4],
    [36, 10, 4],
    [21, 21, 4],
    [11, 15, 3],
    [11, 4, 1],
  ],
  [
    [19, 24, 4],
    [27, 8, 1],
    [34, 18, 3],
    [7, 24, 1],
    [32, 39, 2],
    [27, 36, 2],
    [36, 26, 3],
    [22, 1, 1],
    [21, 19, 2],
    [16, 6, 2],
    [5, 18, 2],
    [26, 1, 4],
    [22, 23, 1],
    [0, 4, 3],
    [23, 16, 3],
    [31, 16, 1],
    [4, 26, 4],
    [0, 26, 1],
    [12, 30, 4],
    [0, 10, 4],
    [37, 38, 3],
    [6, 27, 4],
    [19, 11, 3],
    [13, 33, 4],
    [30, 29, 1],
    [21, 10, 1],
    [25, 2, 3],
    [27, 19, 3],
    [20, 7, 4],
    [22, 9, 3],
    [23, 8, 4],
  ],
  [
    [19, 6, 4],
    [2, 22, 4],
    [19, 34, 4],
    [3, 5, 1],
    [37, 18, 3],
    [8, 15, 2],
    [24, 20, 4],
    [37, 25, 2],
    [10, 5, 1],
    [35, 17, 4],
    [31, 15, 3],
    [23, 12, 4],
    [22, 37, 4],
    [16, 23, 2],
    [33, 21, 3],
    [39, 2, 4],
    [4, 13, 4],
    [38, 4, 1],
    [25, 37, 2],
    [12, 24, 2],
    [14, 8, 4],
    [4, 26, 2],
    [21, 24, 4],
    [17, 7, 3],
    [34, 34, 1],
    [22, 18, 4],
    [11, 18, 4],
    [39, 10, 2],
    [12, 19, 1],
    [9, 8, 4],
    [28, 16, 4],
    [13, 10, 4],
    [6, 30, 1],
    [11, 1, 1],
    [36, 8, 3],
    [31, 13, 1],
    [32, 0, 2],
    [27, 35, 3],
    [15, 16, 1],
    [14, 35, 3],
    [11, 6, 4],
    [7, 6, 3],
    [9, 23, 2],
    [37, 29, 4],
    [30, 12, 4],
    [5, 30, 2],
    [27, 15, 3],
    [39, 26, 2],
    [39, 37, 4],
    [4, 4, 3],
    [5, 19, 3],
  ],
  [
    [24, 26, 1],
    [9, 2, 3],
    [7, 17, 4],
    [16, 19, 3],
    [32, 19, 1],
    [14, 32, 3],
    [24, 17, 3],
    [0, 33, 4],
    [4, 0, 3],
    [3, 12, 4],
    [5, 23, 1],
    [33, 27, 3],
    [37, 11, 3],
    [31, 13, 2],
    [21, 1, 2],
    [5, 30, 4],
    [14, 2, 2],
    [24, 20, 3],
    [21, 24, 3],
    [13, 9, 2],
    [38, 31, 4],
    [30, 2, 3],
    [34, 37, 4],
    [4, 4, 3],
    [36, 9, 1],
    [5, 37, 3],
    [12, 39, 2],
    [16, 29, 2],
    [15, 31, 3],
    [3, 5, 3],
    [18, 18, 1],
    [0, 0, 3],
    [38, 9, 1],
    [27, 38, 3],
    [9, 14, 2],
    [8, 39, 4],
    [22, 1, 1],
    [6, 39, 3],
  ],
  [
    [30, 11, 1],
    [10, 33, 3],
    [20, 19, 3],
    [39, 1, 1],
    [19, 10, 3],
    [13, 35, 3],
    [14, 15, 1],
    [19, 0, 1],
    [9, 5, 2],
    [23, 34, 1],
    [29, 32, 2],
    [6, 3, 2],
    [25, 37, 1],
    [3, 21, 4],
    [15, 3, 1],
    [38, 31, 1],
    [17, 19, 2],
    [25, 36, 2],
    [23, 28, 1],
    [20, 22, 1],
    [12, 30, 1],
    [0, 31, 4],
    [4, 14, 4],
    [23, 33, 4],
    [19, 12, 2],
    [14, 12, 3],
    [12, 39, 2],
    [25, 10, 4],
    [28, 37, 4],
    [32, 34, 1],
    [38, 31, 2],
    [33, 18, 2],
    [39, 3, 1],
    [26, 3, 3],
    [33, 11, 3],
    [19, 19, 2],
    [7, 31, 3],
    [23, 1, 3],
    [36, 18, 2],
    [31, 19, 3],
    [29, 5, 2],
  ],
  [
    [14, 14, 3],
    [37, 37, 2],
    [5, 14, 1],
    [34, 37, 2],
    [39, 13, 1],
    [1, 10, 4],
    [29, 8, 3],
    [8, 15, 2],
    [9, 7, 1],
    [16, 4, 1],
    [15, 13, 1],
    [19, 1, 4],
    [28, 34, 2],
    [16, 3, 2],
    [3, 1, 2],
    [15, 32, 4],
    [22, 26, 3],
    [16, 35, 4],
    [6, 36, 4],
    [6, 12, 1],
    [30, 27, 2],
    [24, 11, 1],
    [25, 2, 1],
    [12, 31, 4],
    [28, 26, 2],
    [20, 24, 3],
    [38, 21, 3],
    [14, 6, 1],
    [34, 1, 4],
    [20, 15, 2],
    [11, 25, 1],
    [37, 13, 1],
    [39, 5, 2],
    [29, 13, 1],
    [39, 27, 4],
    [35, 6, 1],
    [34, 32, 3],
    [4, 22, 1],
    [27, 27, 3],
    [19, 28, 1],
    [11, 7, 2],
    [36, 2, 3],
    [7, 34, 1],
    [23, 17, 1],
    [27, 39, 3],
    [6, 12, 3],
    [39, 30, 1],
    [3, 16, 4],
    [29, 39, 2],
    [33, 1, 1],
    [35, 39, 4],
    [5, 27, 4],
    [14, 10, 4],
    [3, 5, 1],
    [7, 34, 1],
    [34, 17, 2],
    [37, 18, 1],
  ],
  [
    [8, 21, 4],
    [33, 30, 3],
    [17, 5, 2],
    [15, 10, 2],
    [14, 6, 2],
    [6, 18, 3],
    [25, 1, 4],
    [25, 28, 2],
    [29, 13, 1],
    [27, 15, 1],
    [11, 32, 2],
    [21, 19, 2],
    [22, 3, 1],
    [0, 1, 3],
    [8, 25, 4],
    [4, 11, 4],
    [35, 27, 4],
    [27, 6, 1],
    [8, 19, 4],
    [22, 14, 2],
    [9, 2, 4],
    [25, 21, 2],
    [20, 23, 3],
    [10, 35, 2],
    [0, 24, 2],
    [14, 12, 4],
    [22, 39, 3],
    [21, 18, 4],
    [26, 30, 4],
    [18, 36, 3],
    [25, 19, 3],
    [12, 29, 1],
    [36, 16, 4],
    [36, 19, 2],
    [32, 18, 1],
    [23, 8, 1],
    [33, 30, 2],
    [9, 24, 3],
    [32, 35, 1],
    [12, 7, 2],
    [11, 21, 3],
    [2, 35, 2],
    [2, 22, 1],
    [38, 25, 2],
    [1, 27, 3],
    [9, 5, 3],
    [5, 19, 1],
    [28, 16, 4],
    [30, 2, 3],
    [19, 6, 4],
    [20, 0, 2],
    [35, 24, 1],
    [3, 12, 4],
  ],
  [
    [6, 31, 4],
    [4, 34, 3],
    [15, 0, 4],
    [27, 28, 1],
    [36, 28, 4],
    [21, 0, 1],
    [17, 28, 1],
    [39, 3, 3],
    [27, 21, 1],
    [25, 21, 1],
    [20, 17, 4],
    [1, 33, 3],
    [22, 15, 4],
    [13, 8, 3],
    [27, 16, 1],
    [35, 10, 1],
    [18, 16, 2],
    [10, 6, 3],
    [26, 14, 4],
    [27, 5, 1],
    [30, 13, 2],
    [35, 37, 1],
    [27, 8, 3],
    [7, 18, 3],
    [4, 33, 4],
    [10, 28, 2],
    [5, 39, 2],
    [6, 21, 2],
    [32, 7, 1],
    [7, 4, 3],
    [32, 0, 3],
    [12, 31, 4],
    [24, 36, 1],
    [27, 27, 4],
    [36, 18, 4],
    [26, 25, 2],
  ],
  [
    [1, 36, 4],
    [6, 28, 4],
    [13, 21, 3],
    [8, 11, 4],
    [33, 5, 4],
    [19, 28, 1],
    [11, 4, 3],
    [2, 14, 1],
    [29, 5, 2],
    [38, 3, 2],
    [25, 7, 1],
    [31, 20, 4],
    [8, 11, 3],
    [1, 26, 4],
    [38, 1, 2],
    [12, 21, 1],
    [9, 24, 1],
    [24, 14, 4],
    [12, 7, 2],
    [4, 1, 1],
    [15, 26, 4],
    [3, 18, 1],
    [6, 4, 1],
    [33, 7, 4],
    [27, 25, 4],
    [19, 16, 3],
    [30, 9, 4],
    [22, 2, 3],
    [8, 13, 1],
    [21, 10, 2],
    [29, 18, 3],
    [0, 10, 2],
    [20, 12, 3],
    [15, 37, 2],
    [36, 32, 4],
    [18, 14, 1],
  ],
  [
    [4, 16, 3],
    [27, 30, 3],
    [27, 19, 3],
    [9, 28, 1],
    [24, 36, 3],
    [25, 24, 4],
    [39, 5, 3],
    [37, 34, 3],
    [20, 28, 3],
    [20, 2, 2],
    [13, 25, 4],
    [10, 18, 2],
    [28, 11, 2],
    [31, 16, 1],
    [27, 13, 3],
    [8, 8, 1],
    [7, 17, 1],
    [5, 8, 4],
    [18, 24, 2],
    [27, 31, 1],
    [10, 13, 2],
    [17, 33, 1],
    [39, 12, 4],
    [8, 11, 2],
    [36, 9, 4],
    [17, 2, 2],
    [33, 37, 3],
    [27, 30, 4],
    [14, 19, 4],
    [2, 24, 2],
    [10, 19, 1],
    [5, 9, 2],
    [16, 20, 3],
    [10, 15, 4],
    [37, 2, 1],
    [29, 11, 3],
    [3, 9, 2],
    [21, 11, 1],
    [29, 39, 3],
    [19, 3, 4],
    [2, 0, 2],
    [28, 24, 4],
    [35, 11, 1],
    [10, 8, 3],
    [20, 36, 1],
    [34, 27, 3],
    [4, 11, 3],
    [34, 26, 3],
  ],
  [
    [19, 16, 3],
    [29, 18, 4],
    [32, 26, 4],
    [37, 8, 3],
    [4, 28, 1],
    [19, 11, 3],
    [37, 29, 2],
    [1, 23, 3],
    [26, 16, 1],
    [27, 15, 2],
    [35, 32, 1],
    [14, 36, 2],
    [24, 4, 4],
    [37, 13, 3],
    [16, 8, 3],
    [32, 19, 2],
    [36, 30, 2],
    [1, 38, 2],
    [13, 35, 2],
    [11, 9, 2],
    [19, 16, 1],
    [14, 34, 2],
    [2, 23, 2],
    [5, 33, 3],
    [3, 24, 2],
    [5, 6, 3],
    [0, 1, 4],
    [17, 35, 1],
    [34, 17, 2],
    [9, 21, 4],
    [27, 15, 4],
    [36, 1, 1],
    [3, 26, 3],
    [26, 0, 2],
    [0, 17, 1],
    [19, 8, 3],
    [0, 24, 4],
    [28, 26, 2],
  ],
  [
    [15, 2, 4],
    [28, 20, 1],
    [1, 21, 3],
    [26, 26, 1],
    [12, 28, 4],
    [31, 3, 2],
    [15, 31, 3],
    [22, 23, 2],
    [21, 20, 2],
    [30, 33, 1],
    [18, 30, 3],
    [33, 12, 1],
    [33, 39, 4],
    [5, 19, 3],
    [3, 33, 3],
    [36, 9, 4],
    [3, 12, 2],
    [32, 0, 2],
    [7, 28, 4],
    [32, 38, 1],
    [10, 33, 1],
    [9, 38, 1],
    [14, 6, 3],
    [9, 25, 3],
    [30, 29, 1],
    [3, 16, 4],
    [12, 19, 1],
    [18, 18, 3],
    [8, 8, 4],
    [39, 10, 1],
    [20, 4, 2],
    [32, 19, 2],
    [23, 38, 1],
  ],
  [
    [1, 32, 1],
    [17, 31, 1],
    [2, 13, 1],
    [4, 15, 2],
    [20, 33, 1],
    [12, 12, 4],
    [35, 3, 1],
    [2, 6, 3],
    [10, 19, 1],
    [15, 5, 4],
    [7, 32, 1],
    [11, 38, 4],
    [13, 13, 2],
    [8, 16, 1],
    [33, 11, 3],
    [37, 5, 4],
    [1, 21, 3],
    [32, 26, 1],
    [10, 12, 3],
    [12, 39, 1],
    [2, 1, 4],
    [25, 21, 3],
    [34, 18, 2],
    [8, 18, 2],
    [4, 30, 2],
    [35, 1, 3],
    [33, 16, 1],
    [0, 2, 2],
    [0, 37, 1],
    [38, 30, 4],
    [17, 18, 1],
    [26, 10, 2],
    [4, 15, 1],
    [7, 24, 4],
    [21, 38, 4],
    [30, 35, 1],
    [33, 37, 3],
    [20, 38, 1],
    [28, 16, 1],
    [32, 36, 3],
    [3, 36, 3],
    [34, 18, 2],
    [19, 3, 4],
    [3, 1, 2],
    [9, 8, 2],
    [9, 27, 3],
    [35, 25, 3],
    [23, 6, 3],
    [36, 34, 1],
    [5, 6, 2],
    [2, 19, 3],
    [9, 33, 1],
    [32, 15, 1],
  ],
  [
    [38, 0, 4],
    [38, 10, 2],
    [38, 9, 2],
    [33, 4, 4],
    [37, 24, 4],
    [6, 6, 3],
    [35, 34, 1],
    [24, 10, 2],
    [37, 11, 2],
    [3, 30, 2],
    [1, 7, 2],
    [39, 29, 1],
    [20, 34, 1],
    [1, 3, 4],
    [22, 37, 4],
    [35, 21, 2],
    [15, 38, 1],
    [5, 30, 2],
    [26, 22, 4],
    [36, 5, 4],
    [19, 6, 1],
    [33, 0, 1],
    [21, 34, 1],
    [25, 16, 4],
    [26, 32, 1],
    [33, 2, 3],
    [28, 13, 2],
    [26, 37, 2],
    [11, 16, 1],
    [8, 28, 4],
    [37, 18, 2],
    [27, 25, 4],
    [0, 37, 3],
    [4, 26, 3],
    [10, 27, 4],
    [22, 6, 2],
    [27, 16, 2],
    [28, 23, 2],
    [39, 5, 1],
    [27, 16, 3],
    [15, 18, 2],
    [20, 22, 3],
    [16, 29, 1],
    [21, 23, 4],
    [12, 3, 2],
    [19, 39, 3],
    [27, 37, 4],
    [31, 28, 4],
    [12, 33, 3],
    [20, 33, 2],
    [21, 4, 1],
    [15, 37, 4],
    [29, 18, 2],
    [21, 13, 4],
    [28, 13, 2],
    [1, 34, 4],
  ],
  [
    [11, 37, 1],
    [4, 17, 3],
    [37, 14, 1],
    [32, 23, 4],
    [2, 17, 4],
    [19, 11, 4],
    [39, 32, 4],
    [15, 13, 2],
    [3, 13, 1],
    [31, 13, 4],
    [11, 7, 2],
    [11, 30, 4],
    [31, 20, 1],
    [16, 15, 1],
    [21, 17, 3],
    [36, 6, 4],
    [6, 8, 4],
    [20, 17, 3],
    [28, 3, 4],
    [27, 3, 3],
    [24, 17, 4],
    [18, 3, 1],
    [24, 32, 2],
    [7, 13, 3],
    [33, 27, 3],
    [18, 14, 1],
    [37, 16, 3],
    [8, 24, 4],
    [32, 13, 1],
    [8, 32, 4],
    [28, 32, 4],
    [25, 2, 1],
    [6, 10, 2],
  ],
];

console.time("timer");
test(tests);
console.timeEnd("timer");

// Display Zone
function display(coor, i, max, n) {
  const parent = document.createElement("div");

  const { groups, travels, startPoints } = kMeanCluster(coor, max, n);
  visualiseCoordinates(coor, groups, parent, startPoints);

  const ul = document.createElement("ul");
  addLi(ul, `Index: ${i}, NumJobs: ${coor.length}`);
  addLi(ul, `MaxCap: ${max}, Num Technicians: ${n}`);
  addLi(
    ul,
    `Coordinates: ${coor
      .map((element) => `[${element[0]}, ${element[1]}]`)
      .join(", ")}`
  );
  addLi(ul, "");

  const weights = groups.map((group) =>
    group.reduce((sum, coor) => sum + coor[2], 0)
  );

  groups
    .map((group) =>
      group.map((element) => `[${element[0]}, ${element[1]}]`).join(", ")
    )
    .forEach((group, i) => {
      addLi(
        ul,
        i === groups.length - 1
          ? `overflow: 0, ${group ? group : "None Assigned"}`
          : `${colors[i + 3]}: t: ${Math.floor(travels[i])}, w: ${
              weights[i]
            }, ${group}`
      );
    });

  const totalTravel = Math.floor(
    travels.reduce((total, travel) => total + travel, 0)
  );
  addLi(ul, "");
  addLi(ul, `Total Travel: ${totalTravel}`);

  parent.appendChild(ul);
  document.body.appendChild(parent);
  return totalTravel;
}
function visualiseCoordinates(coordinates, groups, parent, startPoints) {
  const [y, x] = getXY(coordinates);

  const groupArr = Array.from({ length: x + 1 }, () =>
    new Array(y + 1).fill(0)
  );
  const weightArr = Array.from({ length: x + 1 }, () =>
    new Array(y + 1).fill(0)
  );
  const startArr = Array.from({ length: x + 1 }, () =>
    new Array(y + 1).fill(0)
  );

  coordinates.forEach((coordinate, i) => {
    groupArr[coordinate[1]][coordinate[0]] = 1;
    weightArr[coordinate[1]][coordinate[0]] = coordinate[2];
    startArr[coordinate[1]][coordinate[0]] = startPoints.includes(i);
  });

  groups.forEach((group, i) => {
    group.forEach((location) => {
      groupArr[location[1]][location[0]] = i === groups.length - 1 ? 1 : i + 3;
    });
  });

  const table = document.createElement("table");

  for (let i = 0; i <= x; i++) {
    const row = document.createElement("tr");

    for (let j = 0; j <= y; j++) {
      const cell = document.createElement("td");
      cell.textContent = `${j}, ${i}, ${weightArr[i][j]}`;
      cell.style.textAlign = "center";
      cell.style.backgroundColor = colors[groupArr[i][j]];
      cell.style.color = startArr[i][j] ? "black" : "gray";
      cell.style.fontWeight = startArr[i][j] ? "bold" : "";

      cell.style.border = "solid 1px black";
      cell.style.fontSize = "11px";
      row.appendChild(cell);
    }
    table.appendChild(row);
  }
  parent.appendChild(table);
}
function addLi(parent, text) {
  const li = document.createElement("li");
  li.textContent = text;
  parent.appendChild(li);
}

//
// Testing Zone
//
function generateTests() {
  const tests = [];
  for (let i = 0; i < 20; i++) {
    const coordinates = [];

    let size = Math.random() * 30 + 30;
    for (let i = 0; i < size; i++) {
      let x = Math.floor(Math.random() * 40);
      let y = Math.floor(Math.random() * 40);
      let z = Math.floor(Math.random() * 4) + 1;
      coordinates.push([x, y, z]);
    }
    tests.push("[" + coordinates.join("], [") + "]");
  }
  console.log("[" + tests.join("], [") + "]");
}
function test(tests) {
  tests.forEach((test, i) => display(test, i, maxWeight, n));
}

// K means clustering with x iterations with randomly chosen coordinates
// RUNTIME: O(number of iterations * number of jobs * number of technicians)

// Iterating multiple times to find the best K-means cluster
function kMeanCluster(coordinates, max, n) {
  let res;
  let minTravel = Number.MAX_SAFE_INTEGER;

  for (let i = 0; i < numIterations; i++) {
    const cur = getRandomKMean(coordinates, max, n);
    let curTravel = cur.travels.reduce((sum, travel) => sum + travel, 0);
    if (curTravel < minTravel) {
      res = cur;
      minTravel = curTravel;
    }
  }
  return res;
}

// Finding a random K mean cluster
function getRandomKMean(coordinates, max, n) {
  const { groups, technicians, added } = initialSetUp(coordinates, n);

  const startPoints = [];

  for (let i = 0; i < n; i++) {
    const rand = getRandomJob(coordinates, added);
    if (rand === -1) break;
    groups[i].push(coordinates[rand]);
    startPoints.push(rand);
    technicians[i].weight += coordinates[rand][2];
  }

  coordinates.forEach((coor, i) => {
    if (added[i]) return;
    const index = closestTech(coordinates, i, startPoints, technicians, max);
    if (index === -1) return;
    groups[index].push(coor);
    technicians[index].weight += coor[2];
    added[i] = true;
  });

  added.forEach((el, i) => {
    if (!el) {
      groups[n].push(coordinates[i]);
    }
  });

  return {
    groups,
    startPoints,
    travels: technicians.map((tech) => tech.travel),
  };
}
function initialSetUp(coordinates, n) {
  const [y, x] = getXY(coordinates);
  const m = coordinates.length;
  const groups = Array.from(Array(n + 1), () => []);
  const technicians = Array.from(Array(n), () => {
    return {
      curLocation: [Math.floor(y / 2), Math.floor(x / 2)],
      travel: 0,
      weight: 0,
    };
  });
  const added = [...Array(m)].map(() => false);
  return { m, groups, technicians, added };
}
// Returns the range of area that the coordinates are located
function getXY(coordinates) {
  return coordinates.reduce(
    (max, coordinate) => {
      return [Math.max(max[0], coordinate[0]), Math.max(max[1], coordinate[1])];
    },
    [0, 0]
  );
}

function getRandomJob(coordinates, added) {
  if (added.every((el) => el)) return -1;

  let rand = Math.floor(Math.random() * coordinates.length);
  while (added[rand]) {
    rand = Math.floor(Math.random() * coordinates.length);
  }
  added[rand] = true;
  return rand;
}
function closestTech(coordinates, x, startPoints, technicians, max) {
  const inits = startPoints.map((el) => coordinates[el]);
  let minDistance = Number.MAX_SAFE_INTEGER;

  const closest = inits.reduce((minIndex, init, i) => {
    if (technicians[i].weight + coordinates[x][2] > max) return minIndex;

    let curDistance = getDistance(init, coordinates[x]);
    if (curDistance < minDistance) {
      minDistance = curDistance;
      return i;
    }

    return minIndex;
  }, -1);

  if (closest !== -1) {
    technicians[closest].travel += minDistance;
  }

  return closest;
}
function getDistance(a, b) {
  return Math.sqrt((a[0] - b[0]) ** 2 + (a[1] - b[1]) ** 2);
}
